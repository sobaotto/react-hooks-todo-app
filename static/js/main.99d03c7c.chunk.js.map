{"version":3,"sources":["const/filter-state.ts","component/AddForm.tsx","component/TodoItem.tsx","component/ItemList.tsx","component/Filter.tsx","component/Footer.tsx","component/Home.tsx","component/Detail.tsx","component/Edit.tsx","component/Header.tsx","component/App.tsx","index.tsx"],"names":["FILTER_STATE","AddForm","props","onSubmit","addTodo","type","placeholder","value","inputText","onChange","updateInputText","TodoItem","history","useHistory","handleLink","path","push","htmlFor","todo","createdAt","id","checked","isDone","toggleCheck","title","onClick","deleteTodo","itemIndex","ItemList","todoElements","todos","map","index","filterState","ALL","ACTIVE","COMPLETED","Filter","className","changeFilterState","Footer","Home","Detail","idString","useParams","parseInt","Edit","useEffect","editingText","inputEditingText","updateTodo","updateEditingText","Header","App","useState","JSON","parse","localStorage","getItem","setTodos","setInputText","setEditingText","setFilterState","setItem","stringify","basename","process","Fragment","component","exact","e","preventDefault","trim","todosCopy","Date","target","targetTodoCreatedAt","editingTodoIndex","indexOf","checkedState","newTodos","filter","editingItemIdString","currentTarget","editingItemId","window","location","pathname","editingTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99d03c7c.chunk.js","sourcesContent":["/**\n * Todoリストのフィルターの状態の一覧です\n */\nexport enum FILTER_STATE {\n  ALL = \"all\",\n  ACTIVE = \"active\",\n  COMPLETED = \"completed\",\n}\n","import \"../css/App.css\";\n\ntype Props = {\n  addTodo: React.FormEventHandler<HTMLFormElement>;\n  inputText: string;\n  // React.FormEventHandlerでもエラー出なかった。なんで？2021/04/25\n  updateInputText: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst AddForm = (props: Props): JSX.Element => {\n  return (\n    <form onSubmit={props.addTodo}>\n      <input\n        type=\"text\"\n        placeholder=\"Todoを入力\"\n        value={props.inputText}\n        onChange={props.updateInputText}\n      />\n      <input type=\"submit\" value=\"追加\" />\n    </form>\n  );\n};\n\nexport { AddForm };\n","import \"../css/App.css\";\nimport { useHistory } from \"react-router-dom\";\n\n\ntype Todo = {\n  createdAt: string;\n  isDone: boolean;\n  title: string;\n};\n\ntype TodoItemProps = {\n  itemIndex: number;\n  todo: Todo;\n  toggleCheck: Function;\n  deleteTodo: Function;\n};\n\nconst TodoItem = (props: TodoItemProps): JSX.Element => {\n  const history = useHistory();\n  const handleLink = (path: any) => history.push(path);\n\n  return (\n    <li>\n      <label htmlFor={props.todo.createdAt}>\n        <input\n          type=\"checkbox\"\n          id={props.todo.createdAt}\n          checked={props.todo.isDone}\n          onChange={() => props.toggleCheck(props.todo.createdAt)}\n        />\n        {props.todo.title}\n      </label>\n      <button onClick={() => props.deleteTodo(props.todo.createdAt)}>×</button>\n      <button onClick={() => handleLink(`/edit/${props.itemIndex}`)}>編集</button>\n      <button onClick={() => handleLink(`/detail/${props.itemIndex}`)}>詳細</button>\n    </li>\n  );\n};\n\nexport { TodoItem };\n","import { FILTER_STATE } from \"../const/filter-state\";\nimport \"../css/App.css\";\nimport { TodoItem } from \"./TodoItem\";\n\ntype Todo = {\n  createdAt: string;\n  isDone: boolean;\n  title: string;\n};\n\ntype ItemListProps = {\n  todos: [\n    {\n      createdAt: string;\n      isDone: boolean;\n      title: string;\n    }\n  ];\n  toggleCheck: Function;\n  deleteTodo: Function;\n  filterState: string;\n};\n\nconst ItemList = (props: ItemListProps): JSX.Element => {\n  const todoElements = props.todos.map((todo: Todo, index: number) => {\n    if (props.filterState === FILTER_STATE.ALL) {\n      return (\n        <TodoItem\n          key={todo.createdAt}\n          itemIndex={index}\n          todo={todo}\n          toggleCheck={props.toggleCheck}\n          deleteTodo={props.deleteTodo}\n        />\n      );\n    }\n    if (props.filterState === FILTER_STATE.ACTIVE) {\n      if (todo.isDone === false) {\n        return (\n          <TodoItem\n            key={todo.createdAt}\n            itemIndex={index}\n            todo={todo}\n            toggleCheck={props.toggleCheck}\n            deleteTodo={props.deleteTodo}\n          />\n        );\n      }\n    }\n    if (props.filterState === FILTER_STATE.COMPLETED) {\n      if (todo.isDone === true) {\n        return (\n          <TodoItem\n            key={todo.createdAt}\n            itemIndex={index}\n            todo={todo}\n            toggleCheck={props.toggleCheck}\n            deleteTodo={props.deleteTodo}\n          />\n        );\n      }\n    }\n    return undefined;\n  });\n\n  return <ul>{todoElements}</ul>;\n};\n\nexport { ItemList };\n","import { FILTER_STATE } from \"../const/filter-state\";\nimport \"../css/App.css\";\n\ntype FilterProps = {\n  filterState: string;\n  changeFilterState: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Filter = (props: FilterProps): JSX.Element => {\n  return (\n    <form id=\"filterList\">\n      <label>\n        <input\n          type=\"radio\"\n          className=\"filter\"\n          value=\"all\"\n          checked={props.filterState === FILTER_STATE.ALL}\n          onChange={props.changeFilterState}\n        />\n        All\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          className=\"filter\"\n          value=\"active\"\n          checked={props.filterState === FILTER_STATE.ACTIVE}\n          onChange={props.changeFilterState}\n        />\n        Active\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          className=\"filter\"\n          value=\"completed\"\n          checked={props.filterState === FILTER_STATE.COMPLETED}\n          onChange={props.changeFilterState}\n        />\n        Completed\n      </label>\n    </form>\n  );\n};\n\nexport { Filter };\n","import \"../css/App.css\";\nimport { Filter } from \"./Filter\";\n\ntype FooterProps = {\n  changeFilterState: React.ChangeEventHandler<HTMLInputElement>;\n  filterState: string;\n};\n\nconst Footer = (props: FooterProps): JSX.Element => {\n  return (\n    <div className=\"footer\">\n      <Filter\n        changeFilterState={props.changeFilterState}\n        filterState={props.filterState}\n      />\n    </div>\n  );\n};\n\nexport { Footer };\n","import \"../css/App.css\";\nimport { AddForm } from \"./AddForm\";\nimport { ItemList } from \"./ItemList\";\nimport { Footer } from \"./Footer\";\n\ntype HomeProps = {\n  addTodo: React.FormEventHandler<HTMLFormElement>;\n  inputText: string;\n  updateInputText: React.ChangeEventHandler<HTMLInputElement>;\n  todos: [\n    {\n      createdAt: string;\n      isDone: boolean;\n      title: string;\n    }\n  ];\n  toggleCheck: Function;\n  deleteTodo: Function;\n  filterState: string;\n  changeFilterState: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Home = (props: HomeProps): JSX.Element => {\n  return (\n    <div className=\"container\">\n      <AddForm\n        addTodo={props.addTodo}\n        inputText={props.inputText}\n        updateInputText={props.updateInputText}\n      />\n      <ItemList\n        todos={props.todos}\n        toggleCheck={props.toggleCheck}\n        deleteTodo={props.deleteTodo}\n        filterState={props.filterState}\n      />\n      <Footer\n        changeFilterState={props.changeFilterState}\n        filterState={props.filterState}\n      />\n    </div>\n  );\n};\n\nexport { Home };\n","import \"../css/App.css\";\nimport { useParams,useHistory } from \"react-router-dom\";\n\ntype DetailProps = {\n  todos: [\n    {\n      createdAt: string;\n      isDone: boolean;\n      title: string;\n    }\n  ];\n};\n\ninterface RouteParams {\n  id: string;\n}\n\nconst Detail = (props: DetailProps): JSX.Element => {\n  const params = useParams<RouteParams>();\n  const idString = params.id;\n  const id = parseInt(idString);\n\n  const history = useHistory();\n  const handleLink = (path: any) => history.push(path);\n\n  return (\n    <div className=\"container\">\n      <p>進捗：{props.todos[id].isDone ? \"完了\" : \"未完了\"}</p>\n      <p>タスク名：{props.todos[id].title}</p>\n      <button onClick={() => handleLink(\"/\")}>戻る</button>\n    </div>\n  );\n};\n\nexport { Detail };\n","import \"../css/App.css\";\nimport { useEffect } from \"react\";\nimport { useParams,useHistory } from \"react-router-dom\";\n\ntype EditProps = {\n  todos: [\n    {\n      createdAt: string;\n      isDone: boolean;\n      title: string;\n    }\n  ];\n  updateTodo: React.FormEventHandler<HTMLFormElement>;\n  editingText: string;\n  updateEditingText: React.ChangeEventHandler<HTMLInputElement>;\n  inputEditingText: Function;\n};\n\ninterface RouteParams {\n  id: string;\n}\n\nconst Edit = (props: EditProps): JSX.Element => {\n  const params = useParams<RouteParams>();\n  const idString = params.id;\n  const id = parseInt(idString);\n\n  const history = useHistory();\n  const handleLink = (path: any) => history.push(path);\n\n  useEffect(() => {\n    if (!props.editingText) {\n      props.inputEditingText(props.todos[id].title);\n    }\n  }, [id, props]);\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={props.updateTodo} id={idString}>\n        <input\n          type=\"text\"\n          value={props.editingText}\n          onChange={props.updateEditingText}\n        />\n        <input type=\"submit\" value=\"更新\" />\n      </form>\n      <button onClick={() => handleLink(\"/\")}>戻る</button>\n    </div>\n  );\n};\n\nexport { Edit };\n","import \"../css/App.css\";\n\nconst Header = (): JSX.Element => {\n  return <h1 className=\"container\">To Do List</h1>;\n};\n\nexport { Header };\n","import \"../css/App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { Home } from \"./Home\";\nimport { Detail } from \"./Detail\";\nimport { Edit } from \"./Edit\";\nimport { Header } from \"./Header\";\n\ntype Todo = {\n  createdAt: Date;\n  isDone: boolean;\n  title: string;\n};\n\nconst App = (): JSX.Element => {\n  const [todos, setTodos] = useState(\n    JSON.parse(localStorage.getItem(\"todos\") as string) || []\n  );\n  const [inputText, setInputText] = useState(\"\");\n  const [editingText, setEditingText] = useState(\"\");\n  const [filterState, setFilterState] = useState(\"all\");\n\n  useEffect((): void => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  const redirectToRoot = (): void => {\n    window.location.pathname = \"/\";\n  };\n\n  const changeFilterState = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setFilterState(e.target.value);\n  };\n\n  const updateInputText = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputText(e.target.value);\n  };\n\n  const updateEditingText = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setEditingText(e.target.value);\n  };\n\n  const inputEditingText = (editingTitle: string): void => {\n    setEditingText(editingTitle);\n  };\n\n  const addTodo = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n\n    if (inputText.trim() === \"\") {\n      return;\n    }\n\n    const todosCopy: Todo[] = [...todos];\n    todosCopy.push({\n      createdAt: new Date(),\n      isDone: false,\n      title: inputText,\n    });\n\n    setTodos(todosCopy);\n    setInputText(\"\");\n  };\n\n  const updateTodo = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const editingItemIdString: string = e.currentTarget.id;\n    const editingItemId = parseInt(editingItemIdString);\n\n    if (editingText.trim() === \"\") {\n      return;\n    }\n\n    const todosCopy: Todo[] = [...todos];\n    todosCopy[editingItemId].title = editingText;\n\n    setTodos(todosCopy);\n    setEditingText(\"\");\n    redirectToRoot();\n  };\n\n  const deleteTodo = (targetTodoCreatedAt: Date) => {\n    const todosCopy: Todo[] = [...todos];\n\n    const newTodos: Todo[] = todosCopy.filter(\n      (todo: Todo) => todo.createdAt !== targetTodoCreatedAt\n    );\n    setTodos(newTodos);\n  };\n\n  const toggleCheck = (targetTodoCreatedAt: Date) => {\n    const createdAtArray: Date[] = todos.map((todo: Todo) => todo.createdAt);\n\n    const editingTodoIndex: number = createdAtArray.indexOf(\n      targetTodoCreatedAt\n    );\n\n    const todosCopy: Todo[] = [...todos];\n    const checkedState: boolean = todosCopy[editingTodoIndex].isDone;\n\n    checkedState\n      ? (todosCopy[editingTodoIndex].isDone = false)\n      : (todosCopy[editingTodoIndex].isDone = true);\n\n    setTodos(todosCopy);\n  };\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <React.Fragment>\n        <Route path=\"/\" component={Header} />\n        <Route exact path=\"/\">\n          <Home\n            addTodo={addTodo}\n            inputText={inputText}\n            updateInputText={updateInputText}\n            todos={todos}\n            toggleCheck={toggleCheck}\n            deleteTodo={deleteTodo}\n            filterState={filterState}\n            changeFilterState={changeFilterState}\n          />\n        </Route>\n        <Route exact path=\"/detail/:id\">\n          <Detail todos={todos} />\n        </Route>\n        <Route exact path=\"/edit/:id\">\n          <Edit\n            todos={todos}\n            updateTodo={updateTodo}\n            editingText={editingText}\n            updateEditingText={updateEditingText}\n            inputEditingText={inputEditingText}\n          />\n        </Route>\n      </React.Fragment>\n    </BrowserRouter>\n  );\n};\n\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport { App } from \"./component/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}